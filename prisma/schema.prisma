// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String      @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?   @unique
  username      String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Employee {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  // Basic Information (وثيقة تعارف)
  arabicName        String   // الاسم (رباعي)
  nickName          String   // اسم الشهرة
  profession        String   // المهنة
  birthDate         DateTime // تاريخ الميلاد
  nationalId        String   @unique // رقم الهوية الوطنية
  maritalStatus     String   // الحالة الاجتماعية (متزوج/أعزب)
  residenceLocation String   // العنوان التفصيلي
  hiringDate        DateTime // تاريخ التعيين
  hiringType        String   // نوع التعيين (دوام كامل/جزئي)
  email             String?  @unique // البريد
  administration    String   // الادارة
  actualWork        String   // العمل الفعلي
  phoneNumber       String   // رقم الهاتف
  notes             String?  // ملاحظات
  
  
  // Spouse Information (بيانات الزوج/الزوجة)
  spouse            Spouse[]
  
  // Children Information (الأبناء)
  children          Child[]
  
  // Parents Information (بيانات الوالدين)

  father            Father?
  mother            Mother?

  // Siblings Information (الأخوة والأخوات)
  siblings          Sibling[]
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("employees")
}

model Spouse {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId        String   @unique @db.Uuid
  employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  name              String   // اسم الزوج/الزوجة
  nationalId        String   @unique // رقم الهوية الوطنية
  birthDate         DateTime // تاريخ الميلاد
  birthPlace        String?  // مكان الميلاد
  profession        String?  // المهنة
  notes             String?  // ملاحظات
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("spouses")
}

model Child {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId        String   @unique @db.Uuid
  employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  name              String   // الاسم رباعي
  birthDate         DateTime // تاريخ الميلاد
  profession        String?  // المهنة
  spouseName        String?  // اسم الزوج/الزوجة
  residenceLocation String   // محل الاقامة للعمل
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("children")
}

model Father {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId        String   @unique @db.Uuid
  employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  name              String   // اسم الوالد رباعي
  nationalId        String?  // رقم الهوية
  profession        String?  // المهنة
  birthDate         DateTime // تاريخ الميلاد
  birthPlace        String?  // مكان الميلاد
  residenceLocation String?  // محل الاقامة للعمل
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("Father")
}


model Mother {
 id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId        String   @unique @db.Uuid
  employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  name              String   // اسم الوالد رباعي
  nationalId        String?  // رقم الهوية
  profession        String?  // المهنة
  birthDate         DateTime // تاريخ الميلاد
  birthPlace        String?  // مكان الميلاد
  residenceLocation String?  // محل الاقامة للعمل
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("Mother")
}


model Sibling {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId        String   @db.Uuid
  employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  name              String   // الاسم رباعي
  birthDate         DateTime // تاريخ الميلاد
  profession        String?  // المهنة
  spouseName        String?  // اسم الزوج/الزوجة
  residenceLocation String   // محل الاقامة للعمل
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("siblings")
}